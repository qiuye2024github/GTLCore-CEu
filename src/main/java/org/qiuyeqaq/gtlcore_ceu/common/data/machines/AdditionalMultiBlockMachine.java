package org.qiuyeqaq.gtlcore_ceu.common.data.machines;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeModifiers;
import com.gregtechceu.gtceu.utils.FormattingUtil;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.Style;
import net.minecraft.world.level.block.Blocks;
import org.qiuyeqaq.gtlcore_ceu.GTLCore_CEu;
import org.qiuyeqaq.gtlcore_ceu.common.data.GTLCEuBlocks;
import org.qiuyeqaq.gtlcore_ceu.common.data.GTLCEuMachines;
import org.qiuyeqaq.gtlcore_ceu.common.data.GTLCEuMaterials;
import org.qiuyeqaq.gtlcore_ceu.common.data.GTLCEuRecipeTypes;
import org.qiuyeqaq.gtlcore_ceu.utils.Registries;

import static com.gregtechceu.gtceu.common.data.GTRecipeModifiers.ELECTRIC_OVERCLOCK;
import static com.gregtechceu.gtceu.common.registry.GTRegistration.REGISTRATE;

@SuppressWarnings("unused")
public class AdditionalMultiBlockMachine {

    public static void init() {}

    public final static MultiblockMachineDefinition ADVANCED_RARE_EARTH_CENTRIFUGAL = REGISTRATE.multiblock("advanced_rare_earth_centrifugal", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTLCEuRecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.rare_earth_centrifugal")))
            .tooltipBuilder(GTLCEuMachines.GTL_ADD)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLCEuBlocks.SPS_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("   AAAAAA     AAAAAA   ", "     B           B     ", "     B           B     ", "   CCCCC       CCCCC   ", "     B           B     ", "     B           B     ", "   CCCCC       CCCCC   ", "     B           B     ", "     B           B     ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("  AADDDDA     ADDDDAA  ", "                       ", "                       ", "  C     C     C     C  ", "                       ", "                       ", "  C     C     C     C  ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle(" AADDDDDAA   AADDDDDAA ", "  B  D  B     B  D  B  ", "  B  E  B     B  E  B  ", " CB EEE BC   CB EEE BC ", "  B EEE B     B EEE B  ", "  B EEE B     B EEE B  ", " CB EEE BC   CB EEE BC ", "  B EEE B     B EEE B  ", "  B  E  B     B  E  B  ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("AADDDDDDDAAAAADDDDDDDAA", "     D           D     ", "   EEEEE       EEEEE   ", "C  EEEEE  C C  EEEEE  C", "   E F E       E F E   ", "   E F E       E F E   ", "C  E F E  C C  E F E  C", "   EEEEE       EEEEE   ", "   EEEEE       EEEEE   ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDA", "    DDD         DDD    ", "   EEEEE       EEEEE   ", "C EEGGGEE C C EEGGGEE C", "  E H H E     E H H E  ", "  E H H E     E H H E  ", "C E H H E C C E H H E C", "  EEGGGEE     EEGGGEE  ", "   EEEEE       EEEEE   ", "    DDD         DDD    ", "     III       III     ", "       IIIIIIIII       ", "                       ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDA", "B DDDDDDD B B DDDDDDD B", "B EEEEEEE B B EEEEEEE B", "C EEGGGEE C C EEGGGEE C", "B EF G FE B B EF G FE B", "B EF G FE B B EF G FE B", "C EF G FE C C EF G FE C", "B EEGGGEE B B EEGGGEE B", "B EEEGEEE B B EEEGEEE B", "    D A         A D    ", "     AAA       AAA     ", "       AAAAIAAAA       ", "          DDD          ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDA", "    DDD         DDD    ", "   EEEEE       EEEEE   ", "C EEGGGEE C C EEGGGEE C", "  E H H E     E H H E  ", "  E H H E     E H H E  ", "C E H H E C C E H H E C", "  EEGGGEE     EEGGGEE  ", "   EEEEE       EEEEE   ", "    DDD         DDD    ", "     III       III     ", "       IIIAIAIII       ", "          DDD          ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDA", "     D           D     ", "   EEEEE       EEEEE   ", "C  EEEEE  C C  EEEEE  C", "   E F E       E F E   ", "   E F E       E F E   ", "C  E F E  C C  E F E  C", "   EEEEE       EEEEE   ", "   EEEEE       EEEEE   ", "                       ", "                       ", "          AIA          ", "          DDD          ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDA", "  B  D  B  A  B  D  B  ", "  B     B  A  B     B  ", " CB EEE BC A CB EEE BC ", "  B EEE B  A  B EEE B  ", "  B EEE B  A  B EEE B  ", " CB EEE BC A CB EEE BC ", "  B EEE B  A  B EEE B  ", "  B  E  B  A  B  E  B  ", "           A           ", "           A           ", "          AAA          ", "          DDD          ")
                    .aisle("AADDDDDDDDDDDDDDDDDDDAA", "          AAA          ", "          AAA          ", "  C     C AAA C     C  ", "          AAA          ", "          AAA          ", "  C     C AAA C     C  ", "          AAA          ", "          AAA          ", "          AAA          ", "          AAA          ", "          AAA          ", "          DDD          ")
                    .aisle(" AAAADDDDDDDDDDDDDAAAA ", "     B     A     B     ", "     B     A     B     ", "   CCCCC   A   CCCCC   ", "     B     A     B     ", "     B     A     B     ", "   CCCCC   A   CCCCC   ", "     B     A     B     ", "     B     A     B     ", "           A           ", "           A           ", "          IAI          ", "          DDD          ")
                    .aisle("    AADDDDDDDDDDDAA    ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "          IAI          ", "          DDD          ")
                    .aisle("     ADDDDDDDDDDDA     ", "           B           ", "           B           ", "         CCCCC         ", "           B           ", "           B           ", "         CCCCC         ", "           B           ", "           B           ", "                       ", "                       ", "          IAI          ", "          DDD          ")
                    .aisle("     AADDDDDDDDDAA     ", "                       ", "                       ", "        C     C        ", "                       ", "                       ", "        C     C        ", "                       ", "                       ", "                       ", "                       ", "          IAI          ", "                       ")
                    .aisle("      AADDDDDDDAA      ", "        B  D  B        ", "        B  E  B        ", "       CB EEE BC       ", "        B EEE B        ", "        B EEE B        ", "       CB EEE BC       ", "        B EEE B        ", "        B  E  B        ", "                       ", "                       ", "          IAI          ", "                       ")
                    .aisle("      ADDDDDDDDDA      ", "           D           ", "         EEEEE         ", "      C  EEEEE  C      ", "         E F E         ", "         E F E         ", "      C  E F E  C      ", "         EEEEE         ", "         EEEEE         ", "                       ", "          IAI          ", "          IAI          ", "                       ")
                    .aisle("     AADDDDDDDDDAA     ", "          DDD          ", "         EEEEE         ", "      C EEGGGEE C      ", "        E H H E        ", "        E H H E        ", "      C E H H E C      ", "        EEGGGEE        ", "         EEEEE         ", "          DAD          ", "          IAI          ", "                       ", "                       ")
                    .aisle("     ADDDDDDDDDDDA     ", "      B DDDDDDD B      ", "      B EEEEEEE B      ", "      C EEGGGEE C      ", "      B EF G FE B      ", "      B EF G FE B      ", "      C EF G FE C      ", "      B EEGGGEE B      ", "      B EEEGEEE B      ", "          DGD          ", "          IAI          ", "                       ", "                       ")
                    .aisle("     ADDDDDDDDDDDA     ", "          DDD          ", "         EEEEE         ", "      C EEGGGEE C      ", "        E H H E        ", "        E H H E        ", "      C E H H E C      ", "        EEGGGEE        ", "         EEEEE         ", "          DDD          ", "                       ", "                       ", "                       ")
                    .aisle("     ADDDDDDDDDDDA     ", "           D           ", "         EEEEE         ", "      C  EEEEE  C      ", "         E F E         ", "         E F E         ", "      C  E F E  C      ", "         EEEEE         ", "         EEEEE         ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("     AADDDDDDDDDAA     ", "        B  D  B        ", "        B     B        ", "       CB EEE BC       ", "        B EEE B        ", "        B EEE B        ", "       CB EEE BC       ", "        B EEE B        ", "        B  E  B        ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("      AAADDDDDAAA      ", "                       ", "                       ", "        C     C        ", "                       ", "                       ", "        C     C        ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("        AAAAAAA        ", "          ABA          ", "          ABA          ", "         CCCCC         ", "           B           ", "           B           ", "         CCCCC         ", "           B           ", "           B           ", "                       ", "                       ", "                       ", "                       ")
                    .aisle("          AAA          ", "          AJA          ", "          AAA          ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ")
                    .where("J", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLCEuBlocks.SPS_CASING.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTLCEuBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where("C", Predicates.blocks(GTLCEuBlocks.ADVANCED_FUSION_COIL.get()))
                    .where("D", Predicates.blocks(GTLCEuBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("F", Predicates.blocks(GTLCEuBlocks.HYPER_CORE.get()))
                    .where("G", Predicates.blocks(Registries.getBlock("kubejs:neutronium_gearbox")))
                    .where("H", Predicates.blocks(Registries.getBlock("kubejs:neutronium_pipe_casing")))
                    .where("I", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore_CEu.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public final static MultiblockMachineDefinition ADVANCED_VACUUM_DRYING_FURNACE = REGISTRATE.multiblock("advanced_vacuum_drying_furnace", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTLCEuRecipeTypes.VACUUM_DRYING_RECIPES)
            .recipeType(GTLCEuRecipeTypes.DEHYDRATOR_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.duration_multiplier.tooltip", 0.5))
            .tooltips(Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.2"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.coil_parallel"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.vacuum_drying"), Component.translatable("gtceu.dehydrator")))
            .tooltipBuilder(GTLCEuMachines.GTL_ADD)
            .appearanceBlock(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("          AAAAAAA  ", "   BBBBBBBBBBBBBB  ", "   B         C     ", "           CCCCC   ", "          CCCCCCC  ", "         CCCCCCCCC ", "         CCCDDDCCC ", "        CCCCDDDCCCC", "         CCCDDDCCC ", "         CCCCCCCCC ", "          CCCCCCC  ", "           CCCCC   ", "             C     ", "                   ")
                    .aisle("CCCCCCC   A CCC A  ", "  GGG       CCC B  ", "  GBG      FFFFF   ", "  GGG     FFFFFFF  ", "  GGG    FFFFFFFFF ", "  GGG   FFFFFFFFFFF", "  GGG   FFFFFFFFFFF", "  GGG   FFFFFFFFFFF", "  GGG   FFFFFFFFFFF", "   C    FFFFFFFFFFF", "         FFFFFFFFF ", "          FFFFFFF  ", "           FFFFF   ", "                   ")
                    .aisle("CCCCCCC   A CCC A  ", " GGGGG      CCC B  ", " G B G     GGGGG   ", " G   G    GGHIHGG  ", " G   G   GG     GG ", " G   G  GG       GG", " G   G  GH       HG", " G   G  GI       IG", " G   G  GH       HG", " CCCCC  GG       GG", "   C     GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "                   ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC B  ", "G  B  G    GGGGG   ", "G     G   GGHIHGG  ", "G     G  GG     GG ", "G     G GG       GG", "G     G GH       HG", "G     G GI       IG", "G     G GH       HG", " C   C  GG       GG", "  CCC    GG     GG ", "  JJJ     GGHIHGGA ", "           GGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC B  ", "G  B  G    GGGGG   ", "G  B  G   GGHIHGG  ", "G  B  G  GG     GG ", "G  B  G GG       GG", "G  B  G GH       HG", "G  B  G GI       IG", "G  B  G GH       HG", "CC B CC GG       GG", " CCBCC   GG     GG ", "  JBJ     GGHIHGGA ", "   BBBBBBBBGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC B  ", "G  B  G    GGGGG   ", "G  B  G   GGHIHGG  ", "G  B  G  GG     GG ", "G  B  G GG       GG", "G  B  G GH       HG", "G  B  G GI       IG", "G  B  G GH       HG", "CC B CC GG       GG", " CCBCC   GG     GG ", "  JBJ     GGHIHGGA ", "   BBBBBBBBGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC B  ", "G     G    GGGGG   ", "G     G   GGHIHGG  ", "G     G  GG     GG ", "G     G GG       GG", "G     G GH       HG", "G     G GI       IG", "G     G GH       HG", " C   C  GG       GG", "  CCC    GG     GG ", "  JJJ     GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", " GGGGG      CCC B  ", " G   G     GGGGG   ", " G   G    GGHIHGG  ", " G   G   GG     GG ", " G   G  GG       GG", " G   G  GH       HG", " G   G  GI       IG", " G   G  GH       HG", " CCCCC  GG       GG", "   C     GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "  GGG       CCC B  ", "  GGG      GGGGGB  ", "  GGG     GGHIHGB  ", "  GGG    GG     BG ", "  GGG   GG       GG", "  GGG   GH       HG", "  GGG   GI       IG", "  GGG   GH       HG", "   C    GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("          A CCC A  ", "            CCC    ", "           GGGGG   ", "          GGHIHGG  ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("          A CCC A  ", "            CCC    ", "           GGGGG   ", "          GGHIHGG  ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC    ", "GGGGGGG    GGGGG   ", "GGGGGGG   GGHIHGG  ", "GGGGGGG  GG     GG ", "GGGGGGG GG       GG", "GGGGGGG HH       HH", "GGGGGGG GI       IG", "GGGGGGG HH       HH", "GGGGGGG GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC A  ", "G     G    GGGGGA  ", "G     G   GGHIHGA  ", "G     G  GG     AG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGGGGG GG       AG", "  JJJ    GG     GA ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC    ", "GGGGGGG     CCC    ", "G     G    GGGGG   ", "G     G   GGHIHGG  ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGAGGG GG       GG", "  JAJ    GG     GG ", "   A      GGHIHGG  ", "   A      BGGGGG   ", "   AAAAAAAA        ")
                    .aisle("CCCCCCCAAAA CCC    ", "GGGGGGGA    CCC    ", "G   AAAA   FFFFF   ", "G     G   FGHIHGF  ", "G     G  FG     GF ", "G     G FG       GF", "G     G FH       HF", "G     G FI       IF", "G     G FH       HF", "GGGGGGG FG       GF", "  JJJ    FG     GF ", "          FGHIHGF  ", "          BFFFFF   ", "          A        ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "G     G  CCGGGGGCC ", "G     G  CGGHIHGGC ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGAGGG GG       GG", "  JAJ    GG     GG ", "   A      GGHIHGG  ", "   A      BGGGGG   ", "   AAAAAAAA        ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "G     G  CCGGGGGCC ", "G     G  CGGHIHGGC ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGGGGG GG       GG", "  JJJ    GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "GGGGGGG  CCGGGGGCC ", "GGGGGGG  CGGHIHGGC ", "GGGGGGG  GG     GG ", "GGGGGGG GG       GG", "GGGGGGG HH       HH", "GGGGGGG GI       IG", "GGGGGGG HH       HH", "GGGGGGG GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "          BBBB     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("  CCCCC  CCCCCCCCC ", "  KKKKK  CCCCCCCCC ", "  KKKKK  CCGGGGGCC ", "  KKKKK  CGGHIHGGC ", "  KKKKK  GG     GG ", "  KKKKK GG       GG", "  KKKKK GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("  CCCCC  CCCCCCCCC ", "  KKKKK  CCCCCCCCC ", "  K   K  CCGGGGGCC ", "  L   L  CGGHIHGGC ", "  L   L  GG H H GG ", "  L   L GG  H H  GG", "  KKKKK GHHHHHHHHHG", "        GI  H H  IG", "        GHHHHHHHHHG", "        GG  H H  GG", "         GG H H GG ", "          GGHIHGG  ", "           GGBGG   ", "             B     ")
                    .aisle("  CCCCC            ", "  KKKKK            ", "  KMMMK    FFFFF   ", "  KMNMK   FFOOOFF  ", "  KMMMK  FFO   OFF ", "  KMMMK FFO     OFF", "  KKKKK PO       OF", "        PO       OF", "        PO       OF", "        FFO     OFF", "         FFO   OFF ", "          FFOOOFF  ", "           FFFFF   ", "                   ")
                    .aisle("                   ", "                   ", "            F F    ", "           CCCCC   ", "          CCCCCCC  ", "         CCCCCCCCC ", "        MCCCQQQCCCF", "        MCCCQQQCCC ", "        MCCCQQQCCCF", "         CCCCCCCCC ", "          CCCCCCC  ", "           CCCCC   ", "            F F    ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "        MMM        ", "        MMM        ", "        MMM        ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .where("N", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where("B", Predicates.blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where("C", Predicates.blocks(GTLCEuBlocks.IRIDIUM_CASING.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_GRATE.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where("F", Predicates.blocks(Registries.getBlock("kubejs:red_steel_casing")))
                    .where("G", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where("H", Predicates.heatingCoils())
                    .where("I", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("J", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where("K", Predicates.blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where("L", Predicates.blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where("M", Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("O", Predicates.blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where("P", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("Q", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller instanceof CoilWorkableElectricMultiblockMachine coilMachine && controller.isFormed()) {
                    components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal(FormattingUtil.formatNumbers(Math.min(2147483647, (int) Math.pow(2, ((double) coilMachine.getCoilType().getCoilTemperature() / 900))))).withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                    components.add(Component.translatable("gtceu.multiblock.blast_furnace.max_temperature",
                            Component.translatable(FormattingUtil.formatNumbers(coilMachine.getCoilType().getCoilTemperature() + 100L * Math.max(0, coilMachine.getTier() - GTValues.MV)) + "K")
                                    .setStyle(Style.EMPTY.withColor(ChatFormatting.RED))));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition HUGE_INCUBATOR = REGISTRATE.multiblock("huge_incubator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLCEuRecipeTypes.INCUBATOR_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.incubator")))
            .tooltipBuilder(GTLCEuMachines.GTL_ADD)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("   ABBBBBA   CCC   ABBBBBA   ", "   AAAAAAA   CCC   AAAAAAA   ", "   A     A   CDC   A     A   ", "             CDC             ", "             CDC             ", "             CCC             ", "             CCC             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEEEEEEEEEEEEEEEEE ", "  AAAAAAAAAEECCCEEAAAAAAAAA  ", "   A     A EEC CEE A     A   ", "   AAAAAAA   C C   AAAAAAA   ", "   A     A   C C   A     A   ", "             C C             ", "             CFC             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEE E EEEEEEEEEEEE ", " AAAAAAAAAAAECCCEAAAAAAAAAAA ", "  GABBBBBAG EC CE GABBBBBAG  ", "  GAHHHHHAG EC CE GAHHHHHAG  ", "  GA     AG EC CE GA     AG  ", "  GAAAAAAAG  C C  GAAAAAAAG  ", "  G       G  CFC  G       G  ", "  I       I   J   I       I  ", "     HHH      J      HHH     ", "    HHHHH     J     HHHHH    ", "    HHHHH     J     HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    KKKKK           KKKKK    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("AEEEEEEEEEEEE E EEEEEEEEEEEEA", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "AAAA     AAAEC CEAAA     AAAA", " AAAAAAAAAAAEC CEAAAAAAAAAAA ", " AAABBBBBAAAEC CEAAABBBBBAAA ", "  AAA   AAA EC CE AAA   AAA  ", "            ECFCE            ", "     HHH             HHH     ", "    HHHHH           HHHHH    ", "   HH   HH         HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   KK   KK         KK   KK   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B       B EC CE B       B  ", " AHA     AHAEC CEAHA     AHA ", "   B     B  EC CE  B     B   ", "  AA     AA EC CE AA     AA  ", "     HHH    ECCCE    HHH     ", "    HHHHH   ECCCE   HHHHH    ", "   H     H  ECCCE  H     H   ", "  HH     HH  CCC  HH     HH  ", "  HH     HH   J   HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  KK     KK       KK     KK  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HHH   HHH       HHH   HHH  ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B  L L  B EC CE B  L L  B  ", " AHA L L AHAEC CEAHA L L AHA ", "   B L L B  EC CE  B L L B   ", "  A  HHH  A EC CE A  HHH  A  ", "    HHHHH   EC CE   HHHHH    ", "   HHMMMHH  EC CE  HHMMMHH   ", "  HH     HH EC CE HH     HH  ", "  H       H  CCC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBBBH           HBBBH    ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEEEEEEEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B   N   B ECFCE B   N   B  ", " AHA  N  AHAECFCEAHA  N  AHA ", "   B  N  B  ECFCE  B  N  B   ", "  A  HHH  A ECFCE A  HHH  A  ", "    HHHHH   ECFCE   HHHHH    ", "   HHMMMHH  ECFCE  HHMMMHH   ", "  HH     HH ECFCE HH     HH  ", "  H       H  CFC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBFBH           HBFBH    ", "      O               O      ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B  L L  B ECCCE B  L L  B  ", " AHA L L AHAECCCEAHA L L AHA ", "   B L L B  ECCCE  B L L B   ", "  A  HHH  A ECCCE A  HHH  A  ", "    HHHHH   ECCCE   HHHHH    ", "   HHMMMHH  ECCCE  HHMMMHH   ", "  HH     HH ECCCE HH     HH  ", "  H       H  CCC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBBBH           HBBBH    ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAEEEEEAAAAAAAAAAAA", "  B       B EEEEE B       B  ", " AHA     AHAEEEEEAHA     AHA ", "   B     B  EEEEE  B     B   ", "  AA     AA EEEEE AA     AA  ", "     HHH    EEEEE    HHH     ", "    HHHHH   EEEEE   HHHHH    ", "   H     H  EEEEE  H     H   ", "  HH     HH       HH     HH  ", "  HH     HH   J   HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  KK     KK       KK     KK  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HHH   HHH       HHH   HHH  ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("AEEEEEEEEEEE  E  EEEEEEEEEEEA", "AAAAAAAAAAAA     AAAAAAAAAAAA", "AAAA     AAA     AAA     AAAA", " AAAAAAAAAAA     AAAAAAAAAAA ", " AAABBBBBAAA     AAABBBBBAAA ", "  AAA   AAA       AAA   AAA  ", "                             ", "     HHH             HHH     ", "    HHHHH           HHHHH    ", "   HH   HH         HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH         HH   HH   ", "   KK   KK         KK   KK   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEEEEEEEEEEEEEEEEE ", " AAAAAAAAAAA LLL AAAAAAAAAAA ", "  GABBBBBAG  LLL  GABBBBBAG  ", "  GAHHHHHAG  LLL  GAHHHHHAG  ", "  GA     AG  LLL  GA     AG  ", "  GAAAAAAAG  LLL  GAAAAAAAG  ", "  G       G  LLL  G       G  ", "  I       I  LLL  I       I  ", "     HHH     LLL     HHH     ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LJL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    KKKKK    LLL    KKKKK    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEE   E   EEEEEEEEEE ", "  AAAAAAAAA LLBLL AAAAAAAAAE ", "   A     A  LLFLL  A     A E ", "   AAAAAAA  LLFLL  AAAAAAA   ", "   A     A  LLFLL  A     A   ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "             LLL             ", "                             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle(" EEEEEEEE E   E   E EEEEEEEE ", " EEEEEEEE  LLBBBLL  EEEEEEEE ", " EEEEEEEE  LL   LL  EEEEEEEE ", "  EEEEEEE  LL   LL  EEEEEEE  ", "  EEEEEEE  LL   LL  EEEEEEE  ", "   EEEEEE  LL   LL  EEEEEE   ", "   EEEEEE  LL   LL  EEEEEE   ", "    EEEEE  LL   LL  EEEEE    ", "    EEEEE  LL   LL  EEEEE    ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL F LL           ", "            LLLLL            ", "             KKK             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("CE    E   E   E   E   E    EC", "CCCCCCCCE LLBBBBBLL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  I  LL ECCCCCCCC", "    CCCCE LL  I  LL ECCCC    ", "    CCCCE LL  I  LL ECCCC    ", "    CCCC  LL     LL  CCCC    ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL  F  LL          ", "           LLKKKLL           ", "            KPPPK            ", "             P P             ", "             P P             ", "      O      P P      O      ", "             KKK             ", "                             ")
                    .aisle("CEEEEEEEEEEEEEEEEEEEEEEEEEEEC", "CCCCCCCCE LBBBBBBBL ECCCCCCCC", "D     FCE LF NRN FL ECF     D", "D     FCE LF NRN FL ECF     D", "D     FCE LF NRN FL ECF     D", "C     FCE LF NRN FL ECF     C", "CFFFC FCE LF IRI FL ECF CFFFC", "  J C FCE LF IRI FL ECF C J  ", "  J C FCE LF IRI FL ECF C J  ", "  J CCFC  LF  F  FL  CFCC J  ", "  JJJJJJJJLF  F  FLJJJJJJJJ  ", "         JLF  F  FLJ         ", "         JLF  F  FLJ         ", "          LF  F  FL          ", "          LF  F  FL          ", "          LF  F  FL          ", "          LF  F  FL          ", "          LF  F  FL          ", "          LFFFFFFFL          ", "           LLFFFLL           ", "            KOPOK            ", "             OPO             ", "             OPO             ", "      OOOOOOOOPOOOOOOOO      ", "             KKK             ", "                             ")
                    .aisle("CE    E   E   E   E   E    EC", "CCCCCCCCE LLBBBBBLL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  N  LL ECCCCCCCC", "CCCCCCCCE LL  I  LL ECCCCCCCC", "    CCCCE LL  I  LL ECCCC    ", "    CCCCE LL  I  LL ECCCC    ", "    CCCC  LL     LL  CCCC    ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL     LL          ", "          LL  F  LL          ", "           LLKKKLL           ", "            KPPPK            ", "             P P             ", "             P P             ", "      O      P P      O      ", "             KKK             ", "                             ")
                    .aisle(" EEEEEEEE E   E   E EEEEEEEE ", " EEEEEEEE  LLBBBLL  EEEEEEEE ", " EEEEEEEE  LL   LL  EEEEEEEE ", "  EEEEEEE  LL   LL  EEEEEEE  ", "  EEEEEEE  LL   LL  EEEEEEE  ", "   EEEEEE  LL   LL  EEEEEE   ", "   EEEEEE  LL   LL  EEEEEE   ", "    EEEEE  LL   LL  EEEEE    ", "    EEEEE  LL   LL  EEEEE    ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL   LL           ", "           LL F LL           ", "            LLLLL            ", "             KKK             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEE   E   EEEEEEEEEE ", " EAAAAAAAAA LLBLL AAAAAAAAA  ", " E A     A  LLFLL  A     A   ", "   AAAAAAA  LLFLL  AAAAAAA   ", "   A     A  LLFLL  A     A   ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "            LLFLL            ", "             LLL             ", "                             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEEEEEEEEEEEEEEEEE ", " AAAAAAAAAAA LLL AAAAAAAAAAA ", "  GABBBBBAG  LLL  GABBBBBAG  ", "  GAHHHHHAG  LLL  GAHHHHHAG  ", "  GA     AG  LLL  GA     AG  ", "  GAAAAAAAG  LLL  GAAAAAAAG  ", "  G       G  LLL  G       G  ", "  I       I  LLL  I       I  ", "     HHH     LLL     HHH     ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    KKKKK    LLL    KKKKK    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH    LLL    HHHHH    ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("AEEEEEEEEEEE  E  EEEEEEEEEEEA", "AAAAAAAAAAAA     AAAAAAAAAAAA", "AAAA     AAA     AAA     AAAA", " AAAAAAAAAAA     AAAAAAAAAAA ", " AAABBBBBAAA     AAABBBBBAAA ", "  AAA   AAA       AAA   AAA  ", "                             ", "     HHH             HHH     ", "    HHHHH           HHHHH    ", "   HH   HH         HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH         HH   HH   ", "   KK   KK         KK   KK   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAEEEEEAAAAAAAAAAAA", "  B       B EEEEE B       B  ", " AHA     AHAEEEEEAHA     AHA ", "   B     B  EEEEE  B     B   ", "  AA     AA EEEEE AA     AA  ", "     HHH    EEEEE    HHH     ", "    HHHHH   EEEEE   HHHHH    ", "   H     H  EEEEE  H     H   ", "  HH     HH       HH     HH  ", "  HH     HH   J   HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  KK     KK       KK     KK  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HHH   HHH       HHH   HHH  ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B  L L  B ECCCE B  L L  B  ", " AHA L L AHAECCCEAHA L L AHA ", "   B L L B  ECCCE  B L L B   ", "  A  HHH  A ECCCE A  HHH  A  ", "    HHHHH   ECCCE   HHHHH    ", "   HHMMMHH  ECCCE  HHMMMHH   ", "  HH     HH ECCCE HH     HH  ", "  H       H  CCC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBBBH           HBBBH    ", "                             ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEEEEEEEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B   N   B ECFCE B   N   B  ", " AHA  N  AHAECFCEAHA  N  AHA ", "   B  N  B  ECFCE  B  N  B   ", "  A  HHH  A ECFCE A  HHH  A  ", "    HHHHH   ECFCE   HHHHH    ", "   HHMMMHH  ECFCE  HHMMMHH   ", "  HH     HH ECFCE HH     HH  ", "  H       H  CFC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBFBH           HBFBH    ", "      O               O      ", "      O               O      ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B  L L  B EC CE B  L L  B  ", " AHA L L AHAEC CEAHA L L AHA ", "   B L L B  EC CE  B L L B   ", "  A  HHH  A EC CE A  HHH  A  ", "    HHHHH   EC CE   HHHHH    ", "   HHMMMHH  EC CE  HHMMMHH   ", "  HH     HH EC CE HH     HH  ", "  H       H  CCC  H       H  ", "  H       H   J   H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  K       K       K       K  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  H       H       H       H  ", "  HH     HH       HH     HH  ", "   HH   HH         HH   HH   ", "    HBBBH           HBBBH    ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("BEEEEEEEEEEEE E EEEEEEEEEEEEB", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "  B       B EC CE B       B  ", " AHA     AHAEC CEAHA     AHA ", "   B     B  EC CE  B     B   ", "  AA     AA EC CE AA     AA  ", "     HHH    ECCCE    HHH     ", "    HHHHH   ECCCE   HHHHH    ", "   H     H  ECCCE  H     H   ", "  HH     HH  CCC  HH     HH  ", "  HH     HH   J   HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  KK     KK       KK     KK  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HH     HH       HH     HH  ", "  HHH   HHH       HHH   HHH  ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("AEEEEEEEEEEEE E EEEEEEEEEEEEA", "AAAAAAAAAAAAECCCEAAAAAAAAAAAA", "AAAA     AAAEC CEAAA     AAAA", " AAAAAAAAAAAEC CEAAAAAAAAAAA ", " AAABBBBBAAAEC CEAAABBBBBAAA ", "  AAA   AAA EC CE AAA   AAA  ", "            ECFCE            ", "     HHH             HHH     ", "    HHHHH           HHHHH    ", "   HH   HH         HH   HH   ", "   HH   HH    J    HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   KK   KK         KK   KK   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HH   HH         HH   HH   ", "   HHHHHHH         HHHHHHH   ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEE E EEEEEEEEEEEE ", " AAAAAAAAAAAECCCEAAAAAAAAAAA ", "  GABBBBBAG EC CE GABBBBBAG  ", "  GAHHHHHAG EC CE GAHHHHHAG  ", "  GA     AG EC CE GA     AG  ", "  GAAAAAAAG  C C  GAAAAAAAG  ", "  G       G  CFC  G       G  ", "  I       I   J   I       I  ", "     HHH      J      HHH     ", "    HHHHH     J     HHHHH    ", "    HHHHH     J     HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    KKKKK           KKKKK    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "    HHHHH           HHHHH    ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle(" EEEEEEEEEEEEEEEEEEEEEEEEEEE ", "  AAAAAAAAAEECCCEEAAAAAAAAA  ", "   A     A EEC CEE A     A   ", "   AAAAAAA   C C   AAAAAAA   ", "   A     A   C C   A     A   ", "             C C             ", "             CFC             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   ABBBBBA   CCC   ABBBBBA   ", "   AAAAAAA   CCC   AAAAAAA   ", "   A     A   CDC   A     A   ", "             CDC             ", "             CDC             ", "             CCC             ", "             CCC             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("             CCC             ", "             C~
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLCEuBlocks.IRIDIUM_CASING.get()))
                    .where("B", Predicates.blocks(Registries.getBlock("gtceu:sterilizing_filter_casing")))
                    .where("C", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.autoAbilities(true, false, true))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setExactLimit(1)))
                    .where("D", Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("G", Predicates.blocks(GTLCEuBlocks.MOLECULAR_CASING.get()))
                    .where("H", Predicates.blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where("I", Predicates.blocks(Registries.getBlock("kubejs:containment_field_generator")))
                    .where("J", Predicates.blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where("K", Predicates.blocks(GTLCEuBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where("L", Predicates.blocks(GTBlocks.PLASTCRETE.get()))
                    .where("M", Predicates.blocks(Blocks.SPONGE))
                    .where("N", Predicates.blocks(GTLCEuBlocks.HYPER_CORE.get()))
                    .where("O", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where("P", Predicates.frames(GTMaterials.Naquadria))
                    .where("R", Predicates.blocks(Registries.getBlock("kubejs:containment_field_generator")))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_NEUTRON_ACTIVATOR = REGISTRATE
            .multiblock("advanced_neutron_activator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .tooltips(Component.translatable("gtceu.machine.neutron_activator.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.advanced_neutron_activator.tooltip.1"))
            .tooltips(Component.translatable("gtceu.machine.advanced_neutron_activator.tooltip.2"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.neutron_activator")))
            .tooltipBuilder(GTLCEuMachines.GTL_ADD)
            .recipeTypes(GTLCEuRecipeTypes.NEUTRON_ACTIVATOR_RECIPES)
            .appearanceBlock(GTLCEuBlocks.SPS_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       AAAAAAA       ", "       AAAAAAA       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       AAAAAAA       ", "       AAAAAAA       ")
                    .aisle("     AABBBBBBBAA     ", "     AA   C   AA     ", "         C           ", "        C            ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "            D        ", "           D         ", "          D          ", "         D           ", "        D            ", "                     ", "                     ", "            C        ", "           C         ", "          C          ", "         C           ", "        C            ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "            D        ", "           D         ", "     AA   D   AA     ", "     AABBBBBBBAA     ")
                    .aisle("   AABBBEEEEEBBBAA   ", "   AA   FFFFF   AA   ", "        FFFFF        ", "        FFFFF        ", "       CFFFFF        ", "      C FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF D      ", "        FFFFFD       ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "       DFFFFF C      ", "      D FFFFFC       ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "       CFFFFF        ", "      C FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF D      ", "        FFFFFD       ", "        FFFFF        ", "        FFFFF        ", "   AA   FFFFF   AA   ", "   AABBBEEEEEBBBAA   ")
                    .aisle(" AABBBEEEEEEEEEBBBAA ", " AA   FFFGFGFFF   AA ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "     CFFFGFGFFF      ", "    C FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF D    ", "      FFFGFGFFFD     ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF C    ", "      FFFGFGFFFC     ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "     DFFFGFGFFF      ", "    D FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "     CFFFGFGFFF      ", "    C FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF D    ", "      FFFGFGFFFD     ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", " AA   FFFGFGFFF   AA ", " AABBBEEEEEEEEEBBBAA ")
                    .aisle("ABBBEEEEEEEEEEEEEBBBA", "A  DFFFGFFFFFGFFF   A", "A D FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A  CFFFGFFFFFGFFF D A", "A C FFFGFFFFFGFFFD  A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF C A", "A   FFFGFFFFFGFFFC  A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A  DFFFGFFFFFGFFF   A", "A D FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A  CFFFGFFFFFGFFF D A", "A C FFFGFFFFFGFFFD  A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF C A", "A   FFFGFFFFFGFFFC  A", "ABBBEEEEEEEEEEEEEBBBA")
                    .aisle("HBEEEEEEEEEEEEEEEEEBH", "H FFFGFFIIIIIFFGFFF H", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "A FFFGFFIIIIIFFGFFF A", "ABEEEEEEEEEEEEEEEEEBA")
                    .aisle("HBEEEEEEEEEEEEEEEEEBH", "H FGFFFGIJIJIGFFFGF H", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", " DFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFD ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", " CFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFC ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", " DFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFD ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", " CFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFC ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "A FGFFFGIJIJIGFFFGF A", "ABEEEEEEEEEEEEEEEEEBA")
                    .aisle("HBEEEEEEEEEEEEEEEEEBH", "H FFFGFFIIIIIFFGFFF H", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "A FFFGFFIIIIIFFGFFF A", "ABEEEEEEEEEEEEEEEEEBA")
                    .aisle("HBEEEEEEEEEEEEEEEEEBH", "H FGFFFGIJIJIGFFFGF H", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFD ", "  FGFFFGIJIJIGFFFGF  ", " DFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFC ", "  FGFFFGIJIJIGFFFGF  ", " CFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFD ", "  FGFFFGIJIJIGFFFGF  ", " DFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGFC ", "  FGFFFGIJIJIGFFFGF  ", " CFGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "  FGFFFGIJIJIGFFFGF  ", "A FGFFFGIJIJIGFFFGF A", "ABEEEEEEEEEEEEEEEEEBA")
                    .aisle("HBEEEEEEEEEEEEEEEEEBH", "H FFFGFFIIIIIFFGFFF H", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFD ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " DFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFFC ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", " CFFFGFFIIIIIFFGFFF  ", "  FFFGFFIIIIIFFGFFF  ", "A FFFGFFIIIIIFFGFFF A", "ABEEEEEEEEEEEEEEEEEBA")
                    .aisle("ABBBEEEEEEEEEEEEEBBBA", "A   FFFGFFFFFGFFFD  A", "A   FFFGFFFFFGFFF D A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A D FFFGFFFFFGFFFC  A", "A  DFFFGFFFFFGFFF C A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A C FFFGFFFFFGFFF   A", "A  CFFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFFD  A", "A   FFFGFFFFFGFFF D A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A D FFFGFFFFFGFFFC  A", "A  DFFFGFFFFFGFFF C A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A   FFFGFFFFFGFFF   A", "A C FFFGFFFFFGFFF   A", "A  CFFFGFFFFFGFFF   A", "ABBBEEEEEEEEEEEEEBBBA")
                    .aisle(" AABBBEEEEEEEEEBBBAA ", " AA   FFFGFGFFF   AA ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFFC     ", "      FFFGFGFFF C    ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "    D FFFGFGFFF      ", "     DFFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "    C FFFGFGFFF      ", "     CFFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFFD     ", "      FFFGFGFFF D    ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFFC     ", "      FFFGFGFFF C    ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "    D FFFGFGFFF      ", "     DFFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", "      FFFGFGFFF      ", " AA   FFFGFGFFF   AA ", " AABBBEEEEEEEEEBBBAA ")
                    .aisle("   AABBBEEEEEBBBAA   ", "   AA   FFFFF   AA   ", "        FFFFF        ", "        FFFFF        ", "        FFFFFC       ", "        FFFFF C      ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "      D FFFFF        ", "       DFFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "      C FFFFFD       ", "       CFFFFF D      ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFFC       ", "        FFFFF C      ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "        FFFFF        ", "      D FFFFF        ", "       DFFFFF        ", "        FFFFF        ", "        FFFFF        ", "   AA   FFFFF   AA   ", "   AABBBEEEEEBBBAA   ")
                    .aisle("     AABBBBBBBAA     ", "     AA   C   AA     ", "           C         ", "            C        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "        D            ", "         D           ", "          D          ", "           D         ", "            D        ", "                     ", "                     ", "        C            ", "         C           ", "          C          ", "           C         ", "            C        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "        D            ", "         D           ", "     AA   D   AA     ", "     AABBBBBBBAA     ")
                    .aisle("       AHHHHHA       ", "       AHHKHHA       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       A     A       ", "       AAAAAAA       ", "       AAAAAAA       ")
                    .where('K', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('A', Predicates.blocks(GTLCEuBlocks.SPS_CASING.get()))
                    .where('B', Predicates.blocks(GTLCEuBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('C', Predicates.frames(GTLCEuMaterials.Quantanium))
                    .where('D', Predicates.frames(GTLCEuMaterials.Vibranium))
                    .where('E', Predicates.blocks(GTLCEuBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', Predicates.blocks(Registries.getBlock("kubejs:speeding_pipe")))
                    .where('H', Predicates.blocks(GTLCEuBlocks.SPS_CASING.get())
                            .or(Predicates.autoAbilities())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMinGlobalLimited(0).setMaxGlobalLimited(2))
                            .or(Predicates.autoAbilities(true, false, true)))
                    .where('I', Predicates.blocks(GTLCEuBlocks.HSSS_REINFORCED_BOROSILICATE_GLASS.get()))
                    .where('J', Predicates.blocks(Registries.getBlock("kubejs:neutronium_pipe_casing")))
                    .where(' ', Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore_CEu.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
}
